package dbproject;

import java.sql.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Hp
 */
public class Admin_Employee extends javax.swing.JFrame {

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    Database db;

    public Admin_Employee() throws SQLException {
        initComponents();

        error.setVisible(false);
        error1.setVisible(false);

        db = new Database();
        db.openConnection();

        con = db.con;
        pst = db.pst;
        rs = db.rs;

        tableupdate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Employee = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        first_name = new javax.swing.JLabel();
        fname = new javax.swing.JTextField();
        first_name1 = new javax.swing.JLabel();
        lname = new javax.swing.JTextField();
        first_name2 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        first_name3 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        first_name4 = new javax.swing.JLabel();
        bankacc = new javax.swing.JTextField();
        first_name6 = new javax.swing.JLabel();
        hiredate = new javax.swing.JTextField();
        first_name7 = new javax.swing.JLabel();
        deptid = new javax.swing.JTextField();
        first_name8 = new javax.swing.JLabel();
        empID = new javax.swing.JLabel();
        empid = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        add = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        search = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        error = new javax.swing.JLabel();
        error1 = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(755, 520));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(744, 490));
        jPanel1.setLayout(null);

        Employee.setFont(new java.awt.Font("Nirmala UI Semilight", 0, 12)); // NOI18N
        Employee.setForeground(new java.awt.Color(52, 45, 71));
        Employee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Email", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Employee.setGridColor(new java.awt.Color(52, 45, 71));
        Employee.getTableHeader().setReorderingAllowed(false);
        Employee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Employee);
        if (Employee.getColumnModel().getColumnCount() > 0) {
            Employee.getColumnModel().getColumn(0).setResizable(false);
            Employee.getColumnModel().getColumn(1).setResizable(false);
            Employee.getColumnModel().getColumn(2).setResizable(false);
            Employee.getColumnModel().getColumn(3).setResizable(false);
            Employee.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(289, 90, 430, 340);

        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(52, 45, 71));
        jLabel1.setText("Employee");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(60, 10, 180, 43);

        first_name.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name.setForeground(new java.awt.Color(52, 45, 71));
        first_name.setText("*First Name:");
        jPanel1.add(first_name);
        first_name.setBounds(30, 70, 80, 20);

        fname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameActionPerformed(evt);
            }
        });
        jPanel1.add(fname);
        fname.setBounds(30, 90, 110, 30);

        first_name1.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name1.setForeground(new java.awt.Color(52, 45, 71));
        first_name1.setText("*Last Name:");
        jPanel1.add(first_name1);
        first_name1.setBounds(150, 70, 80, 20);

        lname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnameActionPerformed(evt);
            }
        });
        jPanel1.add(lname);
        lname.setBounds(150, 90, 120, 30);

        first_name2.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name2.setForeground(new java.awt.Color(52, 45, 71));
        first_name2.setText("Email:");
        jPanel1.add(first_name2);
        first_name2.setBounds(30, 120, 80, 20);

        email.setEditable(false);
        email.setRequestFocusEnabled(false);
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });
        jPanel1.add(email);
        email.setBounds(30, 140, 240, 30);

        first_name3.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name3.setForeground(new java.awt.Color(52, 45, 71));
        first_name3.setText("*Address:");
        jPanel1.add(first_name3);
        first_name3.setBounds(30, 170, 80, 20);

        address.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressActionPerformed(evt);
            }
        });
        jPanel1.add(address);
        address.setBounds(30, 190, 240, 30);

        first_name4.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name4.setForeground(new java.awt.Color(52, 45, 71));
        first_name4.setText("*Bank Account:");
        jPanel1.add(first_name4);
        first_name4.setBounds(30, 220, 80, 20);

        bankacc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bankaccActionPerformed(evt);
            }
        });
        jPanel1.add(bankacc);
        bankacc.setBounds(30, 240, 240, 30);

        first_name6.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name6.setForeground(new java.awt.Color(52, 45, 71));
        first_name6.setText("Hiredate:");
        jPanel1.add(first_name6);
        first_name6.setBounds(30, 320, 80, 20);

        hiredate.setEditable(false);
        hiredate.setRequestFocusEnabled(false);
        hiredate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hiredateActionPerformed(evt);
            }
        });
        jPanel1.add(hiredate);
        hiredate.setBounds(30, 340, 240, 30);

        first_name7.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name7.setForeground(new java.awt.Color(52, 45, 71));
        first_name7.setText("Department ID:");
        jPanel1.add(first_name7);
        first_name7.setBounds(30, 270, 80, 20);

        deptid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deptidActionPerformed(evt);
            }
        });
        jPanel1.add(deptid);
        deptid.setBounds(30, 290, 240, 30);

        first_name8.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        first_name8.setForeground(new java.awt.Color(52, 45, 71));
        first_name8.setText("*Password:");
        jPanel1.add(first_name8);
        first_name8.setBounds(30, 370, 80, 20);

        empID.setFont(new java.awt.Font("Rockwell", 0, 11)); // NOI18N
        empID.setForeground(new java.awt.Color(52, 45, 71));
        empID.setText("Employee ID:");
        jPanel1.add(empID);
        empID.setBounds(440, 60, 80, 14);

        empid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empidActionPerformed(evt);
            }
        });
        jPanel1.add(empid);
        empid.setBounds(520, 50, 80, 30);

        delete.setBackground(new java.awt.Color(88, 84, 98));
        delete.setFont(new java.awt.Font("Rockwell", 1, 10)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("DELETE");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel1.add(delete);
        delete.setBounds(190, 440, 80, 30);

        add.setBackground(new java.awt.Color(88, 84, 98));
        add.setFont(new java.awt.Font("Rockwell", 1, 10)); // NOI18N
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("ADD");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        jPanel1.add(add);
        add.setBounds(20, 440, 70, 30);

        Update.setBackground(new java.awt.Color(88, 84, 98));
        Update.setFont(new java.awt.Font("Rockwell", 1, 10)); // NOI18N
        Update.setForeground(new java.awt.Color(255, 255, 255));
        Update.setText("UPDATE");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        jPanel1.add(Update);
        Update.setBounds(100, 440, 80, 30);

        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        jPanel1.add(search);
        search.setBounds(610, 50, 50, 20);
        jPanel1.add(password);
        password.setBounds(30, 390, 240, 30);

        error.setFont(new java.awt.Font("Rockwell", 1, 10)); // NOI18N
        error.setForeground(new java.awt.Color(255, 0, 51));
        error.setText("numeric values are accepted only");
        jPanel1.add(error);
        error.setBounds(114, 265, 200, 30);

        error1.setFont(new java.awt.Font("Rockwell", 1, 12)); // NOI18N
        error1.setForeground(new java.awt.Color(255, 0, 51));
        error1.setText("*enter required fields to proceed");
        jPanel1.add(error1);
        error1.setBounds(40, 418, 200, 30);

        reset.setText("Reset Table");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        jPanel1.add(reset);
        reset.setBounds(630, 435, 90, 20);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(10, 13, 40, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void fnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnameActionPerformed

    private void lnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lnameActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void addressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressActionPerformed

    private void bankaccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bankaccActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bankaccActionPerformed

    private void hiredateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hiredateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hiredateActionPerformed

    private void deptidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deptidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deptidActionPerformed

    private void empidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empidActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        //req fields are there
        if (!checkfields()) {

            //gets Data of selected record from table
            DefaultTableModel model = (DefaultTableModel) Employee.getModel();
            int selectedIndex = Employee.getSelectedRow();

            //emp id of selected record, used to update record
            int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());

            String Fname = fname.getText();
            String Lname = lname.getText();
            String Email = email.getText();
            String add = address.getText();
            String bacc = bankacc.getText();
            String pw = password.getText();
            try {
                int dept = Integer.parseInt(deptid.getText());

                try {

                    String query = "update Employee set first_name = ?, last_name = ?,"
                            + " address = ?, Bank_account = ?, password = ?, "
                            + "department_id = ? where Employee_ID = ?";
                    pst = con.prepareStatement(query);
                    pst.setString(1, Fname);
                    pst.setString(2, Lname);
                    pst.setString(3, add);
                    pst.setString(4, bacc);
                    pst.setString(5, pw);
                    pst.setInt(6, dept);
                    pst.setInt(7, id);
                    pst.executeUpdate();
                    pst.close();
                    JOptionPane.showMessageDialog(this, "Record Updated.");

                    //Table updated after edits
                    tableupdate();

                } catch (SQLException ex) {
                    java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }

                //fields set empty
                setfieldsEmpty();
                error.setVisible(false);
            } catch (NumberFormatException ex) {
                error.setVisible(true);
            }

            error1.setVisible(false);

        }
    }//GEN-LAST:event_UpdateActionPerformed

    private boolean checkfields() { //check if required fields are there
        if (fname.getText().equals("") || lname.getText().equals("")
                || password.getText().equals("") || address.getText().equals("")
                || bankacc.getText().equals("")) {
            error1.setVisible(true);

            if (fname.getText().trim().isEmpty()) {
                fname.grabFocus();
                return true;
            } else if (lname.getText().trim().isEmpty()) {
                lname.grabFocus();
                return true;
            } else if (address.getText().trim().isEmpty()) {
                address.grabFocus();
                return true;
            } else if (bankacc.getText().trim().isEmpty()) {
                bankacc.grabFocus();
                return true;
            } else if (password.getText().trim().isEmpty()) {
                password.grabFocus();
                return true;
            }
        }

        return false;

    }

    private void tableupdate() { //table updated after every change
        int c;
        try {

            pst = con.prepareStatement("select employee_id, first_name, last_name,"
                    + " email,department_id from Employee");
            rs = pst.executeQuery();

            ResultSetMetaData rsd = rs.getMetaData();
            c = rsd.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) Employee.getModel();
            dft.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 1; i <= c; i++) {
                    v2.add(rs.getString("employee_id"));
                    v2.add(rs.getString("first_name"));
                    v2.add(rs.getString("last_name"));
                    v2.add(rs.getString("email"));
                    v2.add(rs.getString("department_id"));
                }

                dft.addRow(v2);
            }

        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    private void setfieldsEmpty() {
        fname.setText("");
        lname.setText("");
        email.setText("");
        password.setText("");
        address.setText("");
        bankacc.setText("");
        hiredate.setText("");
        deptid.setText("");
        fname.requestFocus();

    }
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        //req fields are there
        if (!checkfields()) {

            String Fname = fname.getText();
            String Lname = lname.getText();
            String Email = Fname + "." + Lname + "@emp.com.pk";
            String add = address.getText();
            String bacc = bankacc.getText();
            String pw = password.getText();
            try {
                int dept = Integer.parseInt(deptid.getText());

                try {
                    String query = "insert into Employee(first_name, last_name, address, "
                            + "email, bank_account, password, department_id) values(?,?,?,?,?,?,?)";
                    pst = con.prepareStatement(query);
                    pst.setString(1, Fname);
                    pst.setString(2, Lname);
                    pst.setString(3, add);
                    pst.setString(4, Email);
                    pst.setString(5, bacc);
                    pst.setString(6, pw);
                    pst.setInt(7, dept);
                    pst.execute();
                    pst.close();
                    JOptionPane.showMessageDialog(this, "Record Addedd.");

                    //Table updates after insertion
                    tableupdate();

                } catch (SQLException ex) {
                    java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }

                //fields are set empty again
                setfieldsEmpty();
                error.setVisible(false);
            } catch (NumberFormatException ex) {
                error.setVisible(true);
            }

            error1.setVisible(false);
        }
    }//GEN-LAST:event_addActionPerformed

    private void EmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeMouseClicked
        //setting text fields as a record is selected
        DefaultTableModel model = (DefaultTableModel) Employee.getModel();
        int selectedIndex = Employee.getSelectedRow();

        int emp = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
        fname.setText(model.getValueAt(selectedIndex, 1).toString());
        lname.setText(model.getValueAt(selectedIndex, 2).toString());
        email.setText(model.getValueAt(selectedIndex, 3).toString());
        deptid.setText(model.getValueAt(selectedIndex, 3).toString());

        //bring other fields from table
        try {
            pst = con.prepareStatement("select * from Employee where employee_ID = ?");
            pst.setInt(1, emp);
            rs = pst.executeQuery();

            if (rs.next()) {
                address.setText(rs.getString("address"));
                bankacc.setText(rs.getString("bank_account"));
                hiredate.setText(rs.getString("hire_date"));
                password.setText(rs.getString("password"));
                deptid.setText(rs.getString("Department_ID"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Admin_Employee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EmployeeMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        //getting selected record
        DefaultTableModel model = (DefaultTableModel) Employee.getModel();
        int selectedIndex = Employee.getSelectedRow();

        int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());

        int dialogresult = JOptionPane.showConfirmDialog(null, "Do you want to delete the record?", "Warning", JOptionPane.YES_NO_OPTION);

        if (dialogresult == JOptionPane.YES_NO_OPTION) {
            try {

                pst = con.prepareStatement("delete from employee where employee_id = ?");
                pst.setInt(1, id);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Record Deleted.");

                tableupdate();

            } catch (SQLException ex) {
                java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }

        }

        //fields set empty
        setfieldsEmpty();
    }//GEN-LAST:event_deleteActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        if (!empid.getText().isEmpty()) {
            try {
                int emp = Integer.parseInt(empid.getText());

                try {
                    pst = con.prepareStatement("select * from Employee where employee_ID = ?");
                    pst.setInt(1, emp);
                    rs = pst.executeQuery();

                    ResultSetMetaData rsd = rs.getMetaData();
                    DefaultTableModel dft = (DefaultTableModel) Employee.getModel();
                    dft.setRowCount(0);

                    if (rs.next()) {
                        Vector v2 = new Vector();
                        v2.add(rs.getString("employee_id"));
                        v2.add(rs.getString("first_name"));
                        v2.add(rs.getString("last_name"));
                        v2.add(rs.getString("email"));
                        v2.add(rs.getString("department_id"));
                        dft.addRow(v2);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Employee.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (NumberFormatException ex) {
                empid.setText("");
            }
        }
    }//GEN-LAST:event_searchActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        tableupdate();
        empid.setText("");
    }//GEN-LAST:event_resetActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        new MainPage().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_Employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Admin_Employee().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_Employee.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Employee;
    private javax.swing.JButton Update;
    private javax.swing.JButton add;
    private javax.swing.JTextField address;
    private javax.swing.JTextField bankacc;
    private javax.swing.JButton delete;
    private javax.swing.JTextField deptid;
    private javax.swing.JTextField email;
    private javax.swing.JLabel empID;
    private javax.swing.JTextField empid;
    private javax.swing.JLabel error;
    private javax.swing.JLabel error1;
    private javax.swing.JLabel first_name;
    private javax.swing.JLabel first_name1;
    private javax.swing.JLabel first_name2;
    private javax.swing.JLabel first_name3;
    private javax.swing.JLabel first_name4;
    private javax.swing.JLabel first_name6;
    private javax.swing.JLabel first_name7;
    private javax.swing.JLabel first_name8;
    private javax.swing.JTextField fname;
    private javax.swing.JTextField hiredate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lname;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton reset;
    private javax.swing.JButton search;
    // End of variables declaration//GEN-END:variables
}
